- name: "install ssl-cert, snapd and python3-cryptography"
  apt:
    name:
      - ssl-cert
      - snapd
      - python3-cryptography
    state: present

- name: "remove OS packages"
  apt:
    name:
      - certbot
      - python3-certbot
    state: absent

- name: "install snap core"
  snap:
    name: core
    state: present

- name: "install certbot from snap"
  snap:
    name: certbot
    classic: yes
    state: present

- name: "create symlink to certbot snap"
  file:
    state: link
    src: /snap/bin/certbot
    dest: /usr/bin/certbot

- name: "create logrotate for certbot"
  copy:
    dest: /etc/logrotate.d/certbot
    content: |
      /var/log/letsencrypt/*.log {
          rotate 12
          weekly
          compress
          missingok
      }

- name: "create systemd service for certbot renewal"
  copy:
    dest: /lib/systemd/system/certbot.service
    content: |
      [Unit]
      Description=Certbot
      Documentation=https://letsencrypt.readthedocs.io/en/latest/
      [Service]
      Type=oneshot
      ExecStart=/usr/bin/certbot -q renew
      PrivateTmp=true

- name: "create systemd timer for certbot renewal"
  copy:
    dest: /lib/systemd/system/certbot.timer
    content: |
      [Unit]
      Description=Run certbot twice daily
      [Timer]
      OnCalendar=*-*-* 00,12:00:00
      RandomizedDelaySec=43200
      Persistent=true
      [Install]
      WantedBy=timers.target

- name: "reload systemd"
  systemd:
    daemon_reload: yes

- name: "start certbot timer"
  systemd:
    name: certbot.timer
    masked: no
    enabled: yes
    state: started

- name: "create /etc/letsencrypt"
  file:
    state: directory
    path: /etc/letsencrypt
    owner: root
    group: root
    mode: '0755'

- name: "create /etc/letsencrypt/cli.ini"
  copy:
    force: no
    dest: /etc/letsencrypt/cli.ini
    content: |
      # created by Ansible
      max-log-backups = 0
    owner: root
    group: root
    mode: '0644'

- name: "configure ECC for certs"
  lineinfile:
    path: /etc/letsencrypt/cli.ini
    regexp: 'key-type'
    line: "key-type = ecdsa"

- name: "configure P-384 cipher for certs"
  lineinfile:
    path: /etc/letsencrypt/cli.ini
    regexp: 'elliptic-curve'
    line: "elliptic-curve = secp384r1"

- name: "check whether cert {{ certbot_certname }} exists"
  stat:
    path: "/etc/letsencrypt/live/{{ certbot_certname }}/cert.pem"
  register: p

- name: "get DNS names from certificate"
  when: p.stat.exists
  community.crypto.x509_certificate_info:
    path: "/etc/letsencrypt/live/{{ certbot_certname }}/cert.pem"
  register: certinfo

- name: "DNS names in cert {{ certbot_certname }}"
  when: p.stat.exists
  debug:
    msg: "{{ certinfo.subject_alt_name }}"

- name: "check all DNS names presence in cert {{ certbot_certname }}"
  when: p.stat.exists and certinfo.subject_alt_name is defined
  loop: "{{ [ certbot_hostname ] + certbot_alt_hostnames }}"
  set_fact:
    all_dns_names_included: "{{ all_dns_names_included|default('yes'|bool) and ( 'DNS:'+item in certinfo.subject_alt_name )}}"

- name: "create cert"
  when: (not p.stat.exists) or (not all_dns_names_included)
  include_tasks:
    file: certbot_create.yml
    apply:
      tags:
        - certbot_certs

- name: "find certbot dirs"
  find:
    paths:
      - /etc/letsencrypt/live
      - /etc/letsencrypt/archive
    file_type: directory
    recurse: yes
  register: certbotdirs

- name: "set access to top-level certbot dirs for ssl-cert group"
  file:
    path: "{{ item }}"
    owner: root
    group: ssl-cert
    mode: 0750
  loop:
    - /etc/letsencrypt/live
    - /etc/letsencrypt/archive

- name: "set access to second-level certbot dirs for ssl-cert group"
  file:
    path: "{{ item.path }}"
    owner: root
    group: ssl-cert
    mode: 0750
  loop: "{{ certbotdirs.files }}"
  loop_control:
    label: "{{ item.path }}"

- name: "find certbot private keys"
  find:
    paths: /etc/letsencrypt/archive
    patterns: 'priv*.pem'
    recurse: yes
  register: privkeys

- name: "set access to certbot private keys for ssl-cert group"
  file:
    path: "{{ item.path }}"
    owner: root
    group: ssl-cert
    mode: 0640
  loop: "{{ privkeys.files }}"
  loop_control:
    label: "{{ item.path }}"

- name: "create renewal pre-hook {{ certbot_prehook | basename }}"
  when: certbot_install_hooks
  copy:
    dest: "/etc/letsencrypt/renewal-hooks/pre/{{ certbot_prehook | basename }}"
    src: "{{ certbot_prehook }}"
    mode: 0755

- name: "create renewal post-hook {{ certbot_posthook | basename }}"
  when: certbot_install_hooks
  copy:
    dest: "/etc/letsencrypt/renewal-hooks/post/{{ certbot_posthook | basename }}"
    src: "{{ certbot_posthook }}"
    mode: 0755
